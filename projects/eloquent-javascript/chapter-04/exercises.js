////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  var myArray = [];
    if ( end < start && step === undefined ) {
      for ( var i = start; i >= end; i-- ) {
        myArray.push(i);
      }
    } else if ( end > start && step === undefined ) {
      for ( var j = start; j <= end; j++ ) {
        myArray.push(j);
      }
    } else if ( step < 0  ) {
      for ( var k = start; k >= end; k += step) {
        myArray.push(k);
      }
    } else if ( step > 0 ) {
      for ( var l = start; l <= end; l += step) {
        myArray.push(l);
      } 
    } 
return myArray;
}


////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
  var sum = 0;
  for (var i = 0 ; i < arr.length ; i++) 
    sum += arr[i];
  return sum;  
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  var newArr = [];
  for (var i = arr.length-1 ; i >=0 ; i--) 
    newArr.push(arr[i]);
  return newArr;
}
////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  var len = arr.length;
  for ( var j = len-1 ; j >= 0 ; j-- )
    arr.push(arr[j]);
  for ( var i = 0 ; i < len ; i++ )
    arr.shift();
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


function arrayToList(arr) {
var list = null;
  for ( var i = arr.length-1 ; i >= 0 ; i-- )
    list = { value: arr[i], rest: list };
return list;
} 

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
var arr = [];
while ( list !== null ) {
  arr.push(list.value);
  list = list.rest;
}
return arr;  
}
////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


function prepend(value,list) {
  return { value: value, rest: list };
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


function nth(list, n) {
  if (!list)
    return undefined;
  else if (n === 0)
    return list.value;
  else
    return nth(list.rest, n - 1);
}
////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a,b) {
  
  if ( a === b )
    return true; 

  
  if (a === null || typeof a != "object" ||
      b === null || typeof b != "object")
    return false;
      
      
  var propsInA = 0, propsInB = 0;

  for (var prop in a)
    propsInA += 1;
    
  console.log(propsInA);  

  for (var prop in b) {
    propsInB += 1;
    if (!(prop in a) || !deepEqual(a[prop], b[prop]))
      return false;
  }

  return propsInA == propsInB;
}


////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
